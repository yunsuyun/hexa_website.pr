.wrapper {
    width: 100%;
    height: auto;

}

/* Header style */
header {
    width: 100%;
    height: auto;
    padding: 1.25rem;
}

header .container {
    display: flex;
    justify-content: space-between;
    align-items: center;

}

header > .container > .navi {
    display: flex;
    column-gap: var(--el-s-interval);
}

header .navi a {
    font-weight: 600;
    font-size: var(--f-n-size);
    letter-spacing: 1px; /* 글자와 글자 사이의 간격 */
    color: var(--f-m-color);
    transition: all .4s;

}

/* 
header .navi a:hover {
    color: var(--f-g-color);
}

header .navi li.active a {
    color: var(--f-g-color) ;
}
*/
/* 위의 2개는 적용을 할려는 내용이 같으므로 아래처럼 합쳐서 간소화 시킬 수 있다. */

header .navi a:hover,
header .navi li.active a {
    color: var(--f-g-color);
}


/* Hero Section Style */
.hero {
    padding: 2.5rem;
}
.hero .container {
    display: flex;   
    column-gap: .9375rem;
}

.hero .container img {
    width: 100%;
    height: 100%;
}

.hero .container .left-side,
.hero .container .right-side {
    width: 50%;
    position: relative;
}

.hero .container .right-side {
    display: flex;
    flex-wrap: wrap;
    gap: .9375rem;
}

.hero .container .right-side > div {
    width: calc(50% - .4688rem);
    gap: .9375rem;
    position: relative;
}

.hero .left-side .inside-txt {
    position: absolute;
    color: #fff; /* a 태그, input 태그 는 부모의 색상을 상속 받지 않는다. */
    width: 85%;
    height: 100%;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    justify-content: center;

}

.hero .left-side .inside-txt h4 {
    font-size: 3.25rem;
    font-weight: 700;
}

.hero .left-side .inside-txt span {
    font-style: italic;
    font-weight: 400;
    margin: 0.875rem 0 1.875rem;
}

.hero .right-side .inside-grid-txt {
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    row-gap: .0375rem;
    color: #fff;
}

.hero .right-side .inside-grid-txt h4 {
    font-size: 1.5rem;
    font-weight: 700;
}

.hero .right-side .inside-grid-txt span {
    font-style: italic;
}

.hero .right-side .hover-box {
    position: absolute;
    width: 90%;
    height: 90%;
    /* background: #000; */
    color: #fff;
    z-index: 999; /*static 이 아닌 포지션 요소가 겹쳤을 때 높은 숫자가 위로 올라감*/
    /* opacity: 0.5; */ /* 투명도 조절 0 ~ 1 사이의 값 주의 사항 1. 자식에게 상속함 이게 싫으면 RGB a 를 사용해야 함 2. display:none 으로하면 opacity 0 처럼 보이지 않게 되는 opacity 0 은 투명해질 뿐 실제로는 존재하는 상테이고 display 는 실체 자체가 사라지게 된다.*/
    background: rgba(42, 42, 42, 0.9); /* a(알파값)이 투명도이며, 자식 요소에게 상속되지 않는다.*/
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* transform 은 중복해서 사용할 수 없다. */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 1.25rem;
    opacity: 0; /* 사라지는 효과로 사용할 경우 요소는 그대로 남고 보이지만 않게 된다. 이럴 경우 visibility 속석을 hidden, visable로 변경하며  이용한다.*/
    visibility: hidden;
    transition: all .4s;
}

.hero .container .right-side > div:hover .hover-box{
    opacity: 1;
    visibility: visible;
}

.hero .right-side .hover-box span {
    text-align: center;
    font-size: 0.875rem;
    padding: 0.75rem;
    font-weight: 300;
}